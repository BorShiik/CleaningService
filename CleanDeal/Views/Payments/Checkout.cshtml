@model CleanDeal.DTOs.CleaningOrderDTO
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery AntiF
@{
	ViewData["Title"] = "Płatność";
	var csrf = AntiF.GetAndStoreTokens(Context).RequestToken;
}
<h2>Podsumowanie płatności</h2>

<p>
    Usługi: <strong>@Model.ServiceNames</strong><br />
    Kwota do zapłaty: <strong>@ViewBag.AmountDisplay.ToString("c")</strong>
</p>

<div class="mb-3">
    <label for="tipInput" class="form-label">Napiwek (zł)</label>
    <input type="number" id="tipInput" class="form-control" value="0" min="0" step="0.5" />
</div>

<button id="payBtn" class="btn btn-success">Zapłać teraz</button>
<span id="error" class="text-danger ms-2"></span>

<script src="https://js.stripe.com/v3/"></script>
<script>
const stripe  = Stripe("@ViewBag.PublishableKey");
const payBtn  = document.getElementById("payBtn");
const errorEl = document.getElementById("error");
const tipInput = document.getElementById("tipInput");

payBtn.addEventListener("click", async () => {
    payBtn.disabled = true;
    try {
        const tip = tipInput.value || 0;
        const resp = await fetch(`/Payments/CreateCheckoutSession?orderId=@Model.Id&tip=${tip}`, {
            method: "POST",
            headers: { "RequestVerificationToken": "@csrf" }
        });
        if (!resp.ok) throw new Error(await resp.text());
        const { id } = await resp.json();
        await stripe.redirectToCheckout({ sessionId: id });

    } catch (e) {
        errorEl.textContent = e.message ?? e;
        payBtn.disabled = false;
    }
});
</script>